{"mappings":"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","sources":["src/app.ts"],"sourcesContent":["type ID = string | number; \n\ninterface Todo {\n  id: ID;\n  userId: ID;\n  title: string;\n  completed: boolean;\n};\n\ninterface User {\n  id: ID;\n  name: string;\n}\n\n(function () {\n  // Globals\n  const todoList = document.getElementById('todo-list'); \n  const userSelect = document.getElementById('user-todo');\n  const form = document.querySelector('form');\n  let todos: Todo[] = [];\n  let users: User[] = [];\n\n  // Attach Events\n  document.addEventListener('DOMContentLoaded', initApp);\n  form?.addEventListener('submit', handleSubmit);\n \n  // Basic Logic\n  function getUserName(userId: ID) {\n    const user = users.find(({id}) => userId === id);\n    return user?.name || \"\";\n  }\n\n  function printTodo({ id, userId, title, completed }: Todo) {\n    const li = document.createElement('li');\n    li.className = 'todo-item';\n    li.dataset.id = String(id);\n    li.innerHTML = `<span>${title} <i>by</i> <b>${getUserName(\n      userId\n    )}</b></span>`;\n\n    const status = document.createElement('input');\n    status.type = 'checkbox';\n    status.checked = completed;\n    status.addEventListener('change', handleTodoChange);\n\n    const close = document.createElement('span');\n    close.innerHTML = '&times;';\n    close.className = 'close';\n    close.addEventListener('click', handleClose);\n\n    li.prepend(status);\n    li.append(close);\n\n    todoList?.prepend(li);\n  }\n\n  function createUserOption(user: User) {\n    if (userSelect) {\n      const option = (document.createElement('option') as HTMLOptionElement);\n      option.value = String(user.id);\n      option.innerText = user.name;\n  \n      userSelect.append(option);\n    }\n  }\n\n  function removeTodo(todoId: ID) {\n    if (todoList) {\n      todos = todos.filter(todo => todo.id !== todoId);\n  \n      const todo = todoList.querySelector(`[data-id=\"${todoId}\"]`);\n\n      if (todo) {\n        todo.querySelector('input')?.removeEventListener('change', handleTodoChange);\n        todo.querySelector('.close')?.removeEventListener('click', handleClose);\n    \n        todo.remove();\n      }\n    }\n  }\n\n  function alertError(error: Error) {\n    alert(error.message);\n  }\n\n  // Event Logic\n  function initApp() {\n    Promise.all([getAllTodos(), getAllUsers()]).then(values => {\n      [todos, users] = values;\n\n      // Отправить в разметку\n      todos.forEach(todo => printTodo(todo));\n      users.forEach(user => createUserOption(user));\n    });\n  }\n\n  function handleSubmit(event: Event) {\n    event.preventDefault();\n\n    if (form) {\n      createTodo({\n        userId: Number(form.user.value),\n        title: form.todo.value,\n        completed: false,\n      });\n    }\n  }\n\n  function handleTodoChange(this: HTMLInputElement) {\n    const parent = this.parentElement;\n    if (parent) {\n      const todoId = parent.dataset.id;\n      const completed = this.checked;\n  \n      todoId && toggleTodoComplete(todoId, completed);\n    }\n  }\n\n  function handleClose(this: HTMLSpanElement) {\n    const parent = this.parentElement\n    if (parent) {\n      const todoId = parent.dataset.id;\n      todoId && deleteTodo(todoId);\n    }\n  }\n\n  // Async logic\n  async function getAllTodos(): Promise<Todo[]> {\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/todos?_limit=15'\n      );\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      if (error instanceof Error) {\n        alertError(error);\n      }\n      return [];\n    }\n  }\n\n  async function getAllUsers(): Promise<User[]> {\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/users?_limit=5'\n      );\n      const data = await response.json();\n\n      return data;\n    } catch (error) {\n      if (error instanceof Error) {\n        alertError(error);\n      }\n      return [];\n    }\n  }\n\n  async function createTodo(todo: Omit<Todo, 'id'>) {\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/todos',\n        {\n          method: 'POST',\n          body: JSON.stringify(todo),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const newTodo: Todo = await response.json();\n\n      printTodo(newTodo);\n    } catch (error) {\n      if (error instanceof Error) {\n        alertError(error);\n      }\n    }\n  }\n\n  async function toggleTodoComplete(todoId: ID, completed: boolean) {\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/todos/${todoId}`,\n        {\n          method: 'PATCH',\n          body: JSON.stringify({ completed }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to connect with the server! Please try later.');\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alertError(error);\n      }\n    }\n  }\n\n  async function deleteTodo(todoId: ID) {\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/todos/${todoId}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (response.ok) {\n        removeTodo(todoId);\n      } else {\n        throw new Error('Failed to connect with the server! Please try later.');\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alertError(error);\n      }\n    }\n  }\n})();\n"],"names":["todoList","document","getElementById","userSelect","form","querySelector","todos","users","printTodo","id","userId","title","completed","li","createElement","className","dataset","String","innerHTML","find","name","getUserName","status","type","checked","addEventListener","handleTodoChange","close","handleClose","prepend","append","alertError","error","alert","message","parent","this","parentElement","todoId","async","fetch","method","body","JSON","stringify","headers","ok","Error","toggleTodoComplete","filter","todo","removeEventListener","remove","removeTodo","deleteTodo","getAllTodos","response","json","getAllUsers","Promise","all","then","values","forEach","user","option","value","innerText","createUserOption","event","preventDefault","createTodo","Number"],"version":3,"file":"index.61831b03.js.map"}